AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template for SMS and Email Delivery Lambda Functions

Parameters:
  SMSServicePackageS3Bucket:
    Type: String
    Default: sms-service-package-bucket
    Description: SMS delivery service package bucket
  SMSServicePackage:
    Type: String
    Default: SMSServicePackage.zip
  EmailServicePackageS3Bucket:
    Type: String
    Default: email-service-package-bucket
    Description: Email delivery service package bucket
  EmailServiceArtifact:
    Type: String
    Default: EmailServiceArtifact.zip
    Description: Email service artifact to be deployed
  AWSSesSender:
    Type: String
    Default: akindeleoluwasegun01@gmail.com
    Description: AWS SES Sender Email Address

Resources:
  # SMS delivery service resources
  SMSDeliveryLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LambdaAllowSQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                Resource: !GetAtt SMSDeliveryQueue.Arn
        - PolicyName: SNSAllow
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !GetAtt SNSTopic.Arn
                
  SMSDeliveryLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt SMSDeliveryLambdaRole.Arn
      FunctionName: SMSDeliveryLambdaFunction
      Code:
        S3Bucket: !Ref SMSServicePackageS3Bucket
        S3Key: !Ref SMSServicePackage
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  SMSDeliveryQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 30

  SMSDeliveryLambdaSQSTrigger:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt SMSDeliveryQueue.Arn
      FunctionName: !GetAtt SMSDeliveryLambdaFunction.Arn
      Enabled: True

  # Common to both sets of resources
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: SNSTopic

  # Email delivery service resources
  EmailDeliveryQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      VisibilityTimeout: 30
      
  EmailDeliveryLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LambdaAllowSQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt EmailDeliveryQueue.Arn
        - PolicyName: SESAllow
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: arn:aws:ses:*

  EmailDeliveryLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: sendEmail.handlers
      Role: !GetAtt EmailDeliveryLambdaRole.Arn
      FunctionName: EmailDeliveryLambdaFunction
      Code:
        S3Bucket: !Ref EmailServicePackageS3Bucket
        S3Key: !Ref EmailServiceArtifact
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          AWS_SES_SENDER: !Ref AWSSesSender

  EmailDeliveryLambdaSQSTrigger:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt EmailDeliveryQueue.Arn
      FunctionName: !GetAtt EmailDeliveryLambdaFunction.Arn
      Enabled: True
